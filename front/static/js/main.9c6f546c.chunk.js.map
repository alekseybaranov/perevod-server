{"version":3,"sources":["store/actions.js","store/reducers.js","store/index.js","components/App.js","index.js"],"names":["changeFirstName","newFirstName","type","payload","changeSecondName","newSecondName","mainReducer","state","action","Object","objectSpread","firstName","secondName","logger","store","next","result","console","groupCollapsed","log","getState","groupEnd","saver","localStorage","JSON","stringify","storeFactory","initialState","applyMiddleware","createStore","parse","App","_this","this","fetch","then","res","json","users","setState","_this$props","props","concat","react_default","a","createElement","value","onChange","event","target","placeholder","className","map","user","key","id","username","React","Component","connect","dispatch","bindActionCreators","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.9c6f546c.chunk.js","sourcesContent":["// ----------------------------------------------------------------------------\r\n// Константы с типами действий\r\n//\r\nexport const ACTION_CHANGE_FIRST_NAME   = 'ACTION_CHANGE_FIRST_NAME'\r\nexport const ACTION_CHANGE_SECOND_NAME  = 'ACTION_CHANGE_SECOND_NAME'\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Action Creators (Создатели действий)\r\n//\r\n// Action Creators - функции, которые возвращают объект действия\r\n//\r\n// Объект действия - это простой объект, который содержит поля:\r\n// type               - идентификатор действия\r\n// payload или другие - необходимая информация для обработки действия,\r\n//                      которая передаётся во входящих параметрах\r\n//\r\n\r\n// Изменение имени\r\nexport const changeFirstName = (newFirstName) => {\r\n  return {\r\n    type: ACTION_CHANGE_FIRST_NAME,\r\n    payload: newFirstName\r\n  }\r\n}\r\n\r\n// Изменение фамилии\r\nexport const changeSecondName = (newSecondName) => {\r\n  return {\r\n    type: ACTION_CHANGE_SECOND_NAME,\r\n    payload: newSecondName\r\n  }\r\n}\r\n\r\n","import {\r\n  ACTION_CHANGE_FIRST_NAME,\r\n  ACTION_CHANGE_SECOND_NAME\r\n} from './actions'\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Reducer\r\n//\r\n// Reducer - это функция, которая запускается каждый раз, когда происходит \r\n//           действие.\r\n//\r\n// Reducer генерирует новое состояние исходя из текущего состояния и действия.\r\n//\r\n// Входящие параметры:\r\n//   state  - текущее состояние\r\n//   action - действие\r\n// Возвращаемое значение: подготовленное новое состояние\r\n//\r\nexport const mainReducer = (state, action) => {\r\n\r\n  // Обработка изменения имени\r\n  //\r\n  if (action.type === ACTION_CHANGE_FIRST_NAME) {\r\n    return { ...state, firstName: action.payload }\r\n  }\r\n\r\n  // Обработка изменения фамилии\r\n  //\r\n  if (action.type === ACTION_CHANGE_SECOND_NAME) {\r\n    return { ...state, secondName: action.payload }\r\n  }\r\n\r\n  // Reducer всегда должен возвращать состояние, поэтому, если действие\r\n  // не опознано, то возвращаем текущее состояние\r\n  //\r\n  return state\r\n}\r\n","import { createStore,\r\n         applyMiddleware } from 'redux'\r\n\r\nimport { mainReducer } from './reducers'    // Преобразователь (reducer)\r\n\r\n\r\n// ключ, под которым будут сохраняться данные в localStorage браузера\r\nconst localStorageKey = 'perevod-data'\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Промежуточное ПО для хранилища\r\n\r\n// logger -----------------------------------\r\n//        регистратор изменений\r\n//\r\nconst logger = store => next => action => {\r\n  // код, который выполняется до выполнения действия\r\n  let result\r\n  console.groupCollapsed(\"dispatching\", action.type)\r\n  console.log('prev state', store.getState())\r\n  console.log('action', action)\r\n\r\n  // выполняем действие\r\n  result = next(action)\r\n\r\n  // код, который вызывается после выполнения действия\r\n  console.log('next state', store.getState())\r\n  console.groupEnd()\r\n  return result\r\n}\r\n\r\n// saver  -----------------------------------\r\n//        сохранение данных в localStore\r\n//\r\nconst saver = store => next => action => {\r\n  // код, который выполняется до выполнения действия\r\n\r\n  // выполняем действие\r\n  let result = next(action)\r\n\r\n  // код, который вызывается после выполнения действия\r\n  localStorage[localStorageKey] = JSON.stringify(store.getState())\r\n  return result\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Store (Хранилище)\r\n//\r\n// Store - это объект, в котором хранятся текущие данные состояния приложения\r\n//         и обрабатываются все обновления состояния.\r\n//\r\n// Хранилище обрабатывает обновление состояния, пропуская текущее состояние\r\n// и действие через единый преобазователь данных (reducer), который передаётся\r\n// функции создания хранилища 'createStore' в качестве параметра.\r\n//\r\n// Метод хранилища 'getState' возвращает текущее состояние приложения.\r\n//\r\n\r\n\r\n// storeFactory  ------------------------------------\r\n//        фабрика создания хранилища с регистрацией промежуточного ПО\r\n//\r\nconst storeFactory = (initialState) =>\r\n  applyMiddleware(logger, saver)(createStore)(      // подключаем промеж-ное ПО\r\n    mainReducer,                                    // редюсер\r\n    (localStorage[localStorageKey]) ?               // загружаем состояние из \r\n      JSON.parse(localStorage[localStorageKey]) :   // локального хранилища\r\n      initialState                                  // или начальное состояние\r\n  )\r\n\r\n  export default storeFactory","import React from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { changeFirstName,\r\n         changeSecondName } from '../store/actions'\r\n\r\nclass App extends React.Component{\r\n\r\n\r\n  componentDidMount() {\r\n    fetch('/users')\r\n      .then(res => res.json())\r\n      .then(users => this.setState({ users }));\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const { firstName, secondName, users,\r\n            changeFirstName, changeSecondName } = this.props\r\n\r\n    console.log(`this.props.users: ${this.props.users}`)\r\n    console.log(`this.props.firstName: ${this.props.firstName}`)\r\n    \r\n    console.log(`firstName: ${firstName}`)\r\n    console.log(`users: ${users}`)\r\n\r\n    \r\n    \r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <input \r\n            type=\"text\" \r\n            value={firstName}\r\n            onChange={(event) => { changeFirstName(event.target.value) }}\r\n            placeholder=\"First Name\" \r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <input \r\n            type=\"text\" \r\n            value={secondName}\r\n            onChange={(event) => { changeSecondName(event.target.value) }}\r\n            placeholder=\"Second Name\" \r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          {`${firstName} ${secondName}`}\r\n        </div>\r\n\r\n        <div className=\"App\">\r\n          <h1>Users</h1>\r\n          {users.map(user =>\r\n            <div key={user.id}>{user.username}</div>\r\n          )}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// функция добавляет их в props все поля из state\r\nconst putStateToProps = (state) => {\r\n  /*\r\n  return {\r\n    firstName: state.firstName,\r\n    secondName: state.secondName,\r\n    users: state.users\r\n  }\r\n  */\r\n\r\n  return {...state}\r\n}\r\n\r\n\r\n// функция должна выдавать объект, с перечислением, какие функции мы хотим\r\n// привязать к компоненту, к props-у\r\nconst putActionToProps = (dispatch) => {\r\n  return {\r\n    changeFirstName: bindActionCreators(changeFirstName, dispatch),\r\n    changeSecondName: bindActionCreators(changeSecondName, dispatch)\r\n  }\r\n}\r\n\r\n\r\nexport default connect(putStateToProps, putActionToProps)(App)\r\n","import 'react-app-polyfill/ie9'   // поддержка IE9\n//import 'react-app-polyfill/ie11'    // поддержка IE11\n// Подключение react-app-polyfill для поддержки IE11 или IE9\n// !!! ОБЯЗАТЕЛЬНО !!!   Строка импорта должна быть первой в файле\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport storeFactory from './store'\n\nimport App from './components/App'                // Компонент приложения\n\n// Начальное состояние  -----------------------------\n//\nconst initialState = {\n  firstName: '',\n  secondName: '',\n  users: []\n}\n\n// Создаём хранилище  -------------------------------\n//\nconst store = storeFactory(initialState)\n\n\n// ----------------------------------------------------------------------------\n// Объект 'Provider' добавляет хранилище к контексту и обновляет компонент App\n// после диспетчеризации действий. Хранилище передаётся провайдеру в виде\n// свойства. Провайдеру нужен один дочерний компонент (в нашем случае - App).\n//\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root'))\n"],"sourceRoot":""}